name: "Check Action"

on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - master
      - 'v*'

jobs:
  build: # make sure build/ci work properly
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Get yarn cache
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install yarn dependencies
      run: yarn install
    - name: Build and check
      run: yarn run all

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_file: [emptyFile.yaml, noErrors.yaml, withError.yaml]
        include:
          - test_file: emptyFile.yaml
            expected_outcome: success
          - test_file: noErrors.yaml
            expected_outcome: success
          - test_file: withError.yaml
            expected_outcome: failure
    steps:
    - name: Install dependencies
      run: sudo apt-get -yy install cmake
    - uses: actions/checkout@v1
    - name: Setup fixes
      run: sed "s:|REPO_PATH|:$GITHUB_WORKSPACE:i" "./ci/test_files/${{ matrix.test_file }}.in" > "./test_cpp/fixes.yaml"
    - name: Execute Action
      id: action_execution
      uses: ./
      continue-on-error: true
      with:
        fixesFile: test_cpp/fixes.yaml
    - name: Check outcome
      if: steps.action_execution.outcome != matrix.expected_outcome
      run: |
        echo Action step ended in unexpected state "${{ steps.action_execution.outcome }}"
        exit 1

  test_nonExistant:
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      run: sudo apt-get -yy install cmake
    - uses: actions/checkout@v1
    - name: Execute Action
      id: action_execution
      uses: ./
      continue-on-error: true
      with:
        fixesFile: test_cpp/fixes.yaml
    - name: Check outcome
      if: steps.action_execution.outcome != 'success'
      run: |
        echo Action step ended in unexpected state "${{ steps.action_execution.outcome }}"
        exit 1
